{"version":3,"file":"ForceDirectedTree.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/forceDirected/ForceDirectedTree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ForceDirectedTree chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"../../charts/types/SerialChart\";\r\nimport { ForceDirectedSeries, ForceDirectedSeriesDataItem } from \"./ForceDirectedSeries\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link DataItem}\r\n */\r\nexport class ForceDirectedTreeDataItem extends SerialChartDataItem { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Indicates whether chart can be zoomed/panned (via mouse, touch, or API).\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default false\r\n\t */\r\n\tzoomable?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default none\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedTreeAdapters extends ISerialChartAdapters, IForceDirectedTreeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A main class for [[ForceDirectedTree]] chart type.\r\n *\r\n * @see {@link IForceDirectedTreeEvents} for a list of available Events\r\n * @see {@link IForceDirectedTreeAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/} For more information\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedTree extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedTreeDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IForceDirectedTreeDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedTreeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedTreeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedTreeEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _backgroundZoomoutDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The chart will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The chart will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 16;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: ZoomOutButton;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedTree\";\r\n\r\n\t\tthis.seriesContainer.isMeasured = true;\r\n\t\tthis.seriesContainer.layout = \"absolute\";\r\n\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\t\tthis.zoomStep = 2;\r\n\r\n\t\tthis.seriesContainer.background.fillOpacity = 0;\r\n\t\tthis.seriesContainer.background.fill = color(\"#ffffff\")\r\n\r\n\t\tlet zoomOutButton = this.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.x = percent(100);\r\n\t\tzoomOutButton.horizontalCenter = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\t\tzoomOutButton.isMeasured = false;\r\n\r\n\t\tzoomOutButton.adapter.add(\"dx\", (dx, target) => {\r\n\t\t\treturn - zoomOutButton.marginRight;\r\n\t\t})\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis.addDisposer(this.seriesContainer.events.on(\"sizechanged\", () => {\r\n\r\n\t\t\tif (this.seriesContainer.scale != 1) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", (event: IInteractionEvents[\"down\"]) => {\r\n\t\t\tif (this.zoomable) {\r\n\t\t\t\tlet svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\r\n\t\t\t\tif (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\r\n\t\t\t\t\tthis.seriesContainer.dragStart(event.pointer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", (event: IInteractionEvents[\"up\"]) => {\r\n\t\t\tif (this.zoomable) {\r\n\t\t\t\tthis.seriesContainer.dragStop(event.pointer, true);\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new ForceDirectedSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ForceDirectedTreeDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\r\n\t\t\t\t\tlet dataItems = series.dataItems;\r\n\t\t\t\t\tif (dataItems.length == 1) {\r\n\t\t\t\t\t\tlet children = series.dataItems.getIndex(0).children;\r\n\t\t\t\t\t\tif (children && children.length > 0) {\r\n\t\t\t\t\t\t\tdataItems = children;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<ForceDirectedSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Force directed tree\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tif ($type.hasValue(series.dataFields.children)) {\r\n\t\t\t\t\t\tdelete info.dataFields[series.dataFields.children];\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet point: IPoint = $utils.documentPointToSprite(event.point, this.seriesContainer);\r\n\r\n\t\tlet zoomLevel = this.seriesContainer.scale;\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tzoomLevel *= this.zoomStep;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tzoomLevel /= this.zoomStep;\r\n\t\t}\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tthis.zoomToPoint(point, zoomLevel)\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the chart to particular point.\r\n\t *\r\n\t * @from 4.10.0\r\n\t * @param  point      A point to zoom to\r\n\t * @param  zoomLevel  Zoom level\r\n\t * @param  center     Should the chart center on the target point?\r\n\t */\r\n\tpublic zoomToPoint(point: IPoint, zoomLevel: number, center?: boolean): void {\r\n\r\n\t\tlet container = this.seriesContainer;\r\n\r\n\t\tlet svgPoint: IPoint\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = { x: this.maxWidth / 2, y: this.maxHeight / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsvgPoint = $utils.spritePointToSvg(point, container)\r\n\t\t}\r\n\r\n\t\tlet x = svgPoint.x - point.x * zoomLevel;\r\n\t\tlet y = svgPoint.y - point.y * zoomLevel;\r\n\r\n\t\tcontainer.animate([{ property: \"scale\", to: zoomLevel }, { property: \"x\", to: x }, { property: \"y\", to: y }], this.zoomDuration, this.zoomEasing);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the chart to particular data item (node).\r\n\t *\r\n\t * @from 4.10.0\r\n\t * @param  dataItem   A data item to zoom to\r\n\t * @param  zoomLevel  Zoom level\r\n\t * @param  center     Should the chart center on the target point?\r\n\t */\r\n\tpublic zoomToDataItem(dataItem: ForceDirectedSeriesDataItem, zoomLevel?: number, center?: boolean): void {\r\n\t\tlet x = dataItem.node.pixelX;\r\n\t\tlet y = dataItem.node.pixelY;\r\n\r\n\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\tzoomLevel = this.seriesContainer.scale * this.zoomStep;\r\n\t\t}\r\n\r\n\t\tthis.zoomToPoint({ x: x, y: y }, zoomLevel, center);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the chart to initial full view.\r\n\t *\r\n\t * @from 4.10.0\r\n\t */\r\n\tpublic zoomOut(): void {\r\n\t\tlet container = this.seriesContainer;\r\n\t\tthis.zoomToPoint({ x: container.pixelWidth / 2, y: container.pixelHeight / 2 }, 1, true);\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.10.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/#Zooming} for more information about zooming ForceDirectedTree\r\n\t * @param value  Zoomable\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"zoomable\", value)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.seriesContainer.resizable = true;\r\n\t\t\t\tthis.seriesContainer.draggable = true;\r\n\t\t\t\tthis.seriesContainer.dragWhileResize = true;\r\n\t\t\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t\t\tthis._backgroundZoomoutDisposer = this.seriesContainer.background.events.on(\"hit\", () => {\r\n\t\t\t\t\tthis.zoomOut();\r\n\t\t\t\t}, this, false);\r\n\t\t\t\tthis._disposers.push(this._backgroundZoomoutDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(this.seriesContainer.events.on(\"sizechanged\", () => {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tseries.nodes.each((node) => {\r\n\t\t\t\t\t\t\tnode.updateLabelSize();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.seriesContainer.resizable = false;\r\n\t\t\t\tthis.seriesContainer.draggable = false;\r\n\t\t\t\tthis.seriesContainer.dragWhileResize = false;\r\n\t\t\t\tthis.mouseWheelBehavior = \"none\";\r\n\t\t\t\tif (this._backgroundZoomoutDisposer) {\r\n\t\t\t\t\tthis._backgroundZoomoutDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param Mouse wheel behavior\r\n\t * @since 4.10.0\r\n\t * @default none\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: ZoomOutButton) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomOut();\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): ZoomOutButton {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedTree\"] = ForceDirectedTree;\r\nregistry.registeredClasses[\"ForceDirectedTreeDataItem\"] = ForceDirectedTreeDataItem;\r\n"]}